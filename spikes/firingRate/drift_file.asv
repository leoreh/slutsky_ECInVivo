function drft = drift_file(basepath, graphics)

% wrapper for drift_calc. repeats the calculation for RS and FS units, and
% for NREM and AW. relies on fr and units files in basepath
%
% INPUT:
%   basepath        string. path to recording folder {pwd}
%   graphics        logical. plot {false}
%
% DEPENDENCIES:
%   drift_calc
%   drift_plot
%
% TO DO LIST:
%
% 22 may 24 LH      based on Lee's code. see also
% % geva (ziv) et al.,
% Neuron, 2013

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% input
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

if nargin < 1
    basepath = pwd;
end
if nargin < 2
    graphics = false
end
[~, basename] = fileparts(basepath);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% preparations
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% analysis params
winsize = 3600;
thrLin = 4;
thrFr = 0.005;
thrWin = 10;

% load data
varsFile = ["fr"; "units"];
varsName = ["fr"; "units"];
v = getSessionVars('basepaths', {basepath}, 'varsFile', varsFile,...
    'varsName', varsName, 'pcond', ["tempflag"]);

% state params
sstates = [1, 4];       % selected states for calculating drift
cfg = as_loadConfig;
snames = cfg.names(sstates);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% analyze
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

for iunit = 1 : 2
    unitIdx = v.units.clean(iunit, :);

    % calc drift across recording
    fr_mat = v.fr.strd(unitIdx, :);
    tstamps = v.fr.tstamps;
    drft(iunit, 1) = drift_calc(fr_mat, tstamps, 'graphics', false,...
        'winsize', winsize, 'thrLin', thrLin, 'thrFr', thrFr, 'thrWin', thrWin);

    % calc drift per state
    for istate = 1 : length(sstates)
        fr_mat = v.fr.states.fr{sstates(istate)}(unitIdx, :);
        tstamps = v.fr.states.tstamps{sstates(istate)};
        drft(iunit, istate + 1) = drift_calc(fr_mat, tstamps, 'graphics', false,...
            'winsize', winsize, 'thrLin', thrLin, 'thrFr', thrFr, 'thrWin', thrWin);
    end

end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% graphics
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% plot drift per unit and state

ulabel = ["RS"; "FS"];

if graphics

    setMatlabGraphics(true)
    fh = figure;
    set(fh, 'WindowState', 'maximized');
    tlayout = [2, 3];
    th = tiledlayout(tlayout(1), tlayout(2));
    th.TileSpacing = 'tight';
    th.Padding = 'none';
    set(fh, 'DefaultAxesFontSize', 16);
    title(th, basename, 'interpreter', 'none', 'FontSize', 20);

    for iunit = 1 : 2
        tbias = (iunit - 1) * tlayout(2) + 1;
        axh = nexttile(th, tbias, [1, 1]); cla; hold on
        drift_plot(drft(iunit, 1), axh);
        ylabel(sprintf('%s Drift Rate [1 / h]', ulabel(iunit)))
        title(axh, 'Full Recording')
        ylim([0 1])

        for istate = 1 : length(sstates)
            tbias = (iunit - 1) * tlayout(2) + 1 + istate;
            axh = nexttile(th, tbias, [1, 1]); cla; hold on
            drift_plot(drft(iunit, istate + 1), axh);
            ylabel(sprintf('%s Drift Rate [1 / h]', ulabel(iunit)))
            title(axh, snames(istate))
            ylim([0 1])

        end
    end
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% organize data
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% for each numeric field, that two last dimesions are unit and then state
for istate = 1 : length(sstates) + 1
    s(istate) = catfields(drft(:, istate), 'addim');
end
s = catfields(s, 'addim');
flds = fieldnames(s);
for ifld = 1 : length(flds)
    fld = flds{ifld};
    if isnumeric(s.(fld)) || islogical(s.(fld))
        s.(fld) = squeeze(s.(fld));
    end
end
drft = s;

end

% EOF

