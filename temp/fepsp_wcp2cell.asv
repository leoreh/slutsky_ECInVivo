
% organizes recordings from wcp. assumes all raw .wcp files are in basepath
% and are named with unique numbers (e.g. 220316_034). user selects the
% specific files by specifying the last 3 digits of the filename. 

% CALLS
%   getLFP
%   specBand
%   

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% prep data
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% user input
basepath = 'G:\Data\hb_a2';
slctfiles = [13];
fepsp_protocol = 'stp';
recname = '220316_stp1';
fsOut = [];
intens = [70];

% data folder
cd(basepath)
rawfiles = dir('*.wcp');
rawnames = {rawfiles.name};
rawsuffix = cellfun(@(x) x(end - 6 : end - 4), rawnames, 'uni', false);

% organize protocol info
protocol_info = fepsp_getProtocol('protocol_id', fepsp_protocol);
stim_times = protocol_info.stim_times / 1000;

% initialize
nfiles = length(slctfiles);
cntdata = [];
stim_locs = cell(1, nfiles);
stim_start = 1;
filelength = nan(1, nfiles);

% load and organize data
for ifile = 1 : nfiles

    fileidx = contains(rawnames, rawsuffix{slctfiles(ifile)});
    [~, basename] = fileparts(rawfiles(fileidx).name);

    % load lfp
    lfp = getLFP('basepath', basepath, 'basename', basename,...
        'ch', 1, 'chavg', {},...
        'fs', [], 'interval', [0 inf], 'extension', 'wcp',...
        'savevar', false, 'forceL', true, 'cf', []);
    fs = lfp.fs;
    [nsamps, ntraces] = size(lfp.data);

    % organize according to protocol
    switch fepsp_protocol
        
        case 'freerun'
            % remove incomplete data from last tract
            tmpdata = lfp.data(:);
            rmidx = find(movmax(diff(tmpdata), [0, 100]) == 0);
            if max(diff(rmidx)) > 1 
                warning('check')
            end
            if ~isempty(rmidx)
                tmpdata(rmidx(1) : end) = [];
            end
            cntdata = [cntdata; tmpdata];
            filelength(ifile) = length(tmpdata);            

        case 'io'
            % cat data and create stim indices
            cntdata = [cntdata; lfp.data(:)];
            stim_locs{ifile} = stim_start + [stim_times * fs :...
                size(lfp.data, 1) : length(lfp.data(:))];
            stim_start = length(cntdata);
        
        case 'stp'
            cntdata = [cntdata; lfp.data(:)];
            traceJump = repmat(nsamps, protocol_info.nStim, ntraces) .* [0 : ntraces - 1];
            stimIdx = repmat(stim_start + stim_times * fs, 1, ntraces);
            stimtmp = [traceJump + stimIdx];
            stim_locs{ifile} = sort(stimtmp(:));
    end
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% filter and downsample
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% filter params
import iosr.dsp.*       % import sync filter toolbox
cf = 450;               % low pass cutoff
fsIn = fs; 
if isempty(fsOut)
    fsOut = fsIn;
end
fsRatio = (fsIn / fsOut);
if cf > fsOut / 2
    warning('low pass cutoff beyond nyquist')
end
filtRatio = cf / (fsIn / 2);
ntbuff = 525;           % default filter size in iosr toolbox
if mod(ntbuff, fsRatio) ~= 0
    ntbuff = round(ntbuff + fsRatio - mod(ntbuff, fsRatio));
end

% do the filtering
lfp.data = [iosr.dsp.sincFilter(cntdata, filtRatio)]';

% downsample
if fsRatio ~= 1
    lfp.data = real(lfp.data(:, fsRatio : fsRatio :...
        length(lfp.data) - ntbuff));
end
lfp.fs = fsOut;
lfp.filelength = filelength / fsIn;       % [s]

% downsample stimulus indices
stim_locs = cellfun(@(x) round(x / fsRatio), stim_locs, 'uni', false);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% organize struct and save
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% add info to lfp struct
lfp.files = {rawfiles(slctfiles).name};
lfp.fepsp_protocol = fepsp_protocol;

% save
recdir = fullfile(basepath, recname);
mkdir(recdir);
save(fullfile(recdir, [recname, '.lfp.mat']), 'lfp')

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% continue processing
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

basepath = recdir;
cd(basepath)
[~, basename] = fileparts(basepath);
fs = lfp.fs;

% freerun -----------------------------------------------------------------
% spectrogram (freerun)
[s, tstamps, freq] = specBand('basepath', basepath, 'sig', lfp.data,...
    'fs', lfp.fs, 'graphics', true, 'logfreq', true);
yLimit = ylim;
hold on
tidx = [cumsum(lfp.filelength) / 60 / 60]';
tidx = [1; tidx(1 : end - 1)];
plot([tidx, tidx], ylim, '--k', 'LineWidth', 2)
hold on
text(tidx, repmat(yLimit(2) + 0.01 * yLimit(2), length(tidx), 1), string(slctfiles))


% fepsp --------------------------------------------------------------------

% organize in fepsp cell format
[traces] = fepsp_org2traces('data_in', lfp.data',...
    'basepath', basepath, 'fs', fs, 'protocol_id', fepsp_protocol,...
    'stim_locs', stim_locs);

% mark traces via gui
marking_win = fepsp_markings("traces", traces, "fs", fs,...
    "protocol_id", fepsp_protocol, "base_path", basepath,...
    "intens", intens, "traces_Xlimit", [], "traces_Ylimit", [],...
    "dt", 2, "max_jitter", 0.5, "fast_mark", false);

% load markings and updated traces
waitfor(marking_win)
load([basename, '_fepsp_markings.mat'], "markings")
load([basename, '_fepsp_traces.mat'], "traces")

% analyze traces according to the manual markings
results = fepsp_analyse("traces", traces, "fs", fs,...
    "protocol_id", fepsp_protocol, "markings", markings,...
    "base_path", basepath, "save_var", true, "slope_area", [0.2 0.9]);

% step 4        dispalys the results
analysed_fepsp = fepsp_summaryPlot("traces", traces, "fs", fs,...
    "protocol_id", fepsp_protocol, "markings", markings, "results", results,...
    "base_path", basepath, "intens", intens);

