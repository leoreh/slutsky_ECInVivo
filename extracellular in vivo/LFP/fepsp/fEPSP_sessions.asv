% fEPSP_sessions

% organizes and plots fepsp from multiple sessions. gets structs and
% transforms them to matrices of vars (e.g. amp and wv) vs. time
% (sessions). rubust to missing sessions (replaced by nan) and allows for
% different stim intensities between sessions. compensates if arrays are
% not sorted (though fEPSPfromOE should sort by intensity)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% arguments
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% fr_sessions

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% arguments
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
forceL = true;
forceA = false;

basepath = 'F:\Data\Processed\lh58\fepsp';
dirnames = ["lh58_200915_100905";...
    "lh58_200915_110952";...
    "lh58_200915_170935";...
    "lh58_200916_100928";...
    "lh58_200916_120928";...
    "lh58_200916_160953"];

% should allow user to input varName or columnn index
colName = 'Session';                    % column name in xls sheet where dirnames exist
% string array of variables to load
vars = ["session.mat";...
    "fepsp"];      
% column name of logical values for each session. only if true than session
% will be loaded. can be a string array and than all conditions must be
% met.
pcond = ["fepsp"];     
% pcond = [];
% same but imposes a negative condition)
ncond = ["fix"];                      
ncond = [""];
sessionlist = 'sessionList.xlsx';       % must include extension
fs = 20000;                             % can also be loaded from datInfo

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% load data
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% get directory paths
if exist('dirnames', 'var') && isstring(dirnames)
    % ALT 1: user input dirnames
    dirnames = dirnames;
elseif ischar(sessionlist) && contains(sessionlist, 'xlsx')
    % ALT 2: get dirnames from xlsx file
    sessionInfo = readtable(fullfile(basepath, sessionlist));
    icol = strcmp(sessionInfo.Properties.VariableNames, colName);
    dirnames = string(table2cell(sessionInfo(:, icol)));
    % check dirnames meet conditions
    clear irow iicol
    irow = ones(length(dirnames), 1);
    for i = 1 : length(pcond)
        iicol(i) = find(strcmp(sessionInfo.Properties.VariableNames, char(pcond(i))));
        irow = irow & sessionInfo{:, iicol(i)} == 1;
    end
    for i = 1 : length(ncond)
        iicol(i) = find(strcmp(sessionInfo.Properties.VariableNames, char(ncond(i))));
        irow = irow & sessionInfo{:, iicol(i)} ~= 1;
    end
    dirnames = dirnames(irow);
    dirnames(strlength(dirnames) < 1) = [];
end

nsessions = length(dirnames);

% load files
if forceL   
    d = cell(length(dirnames), length(vars));
    for i = 1 : nsessions
        filepath = char(fullfile(basepath, dirnames(i)));
        if ~exist(filepath, 'dir')
            warning('%s does not exist, skipping...', filepath)
            continue
        end
        cd(filepath)
        
        for ii = 1 : length(vars)           
            filename = dir(['*', vars{ii}, '*']);
            if length(filename) == 1
                d{i, ii} = load(filename.name);
            else
                warning('no %s file in %s, skipping', vars{ii}, filepath)
            end
        end
    end
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% analyze data
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
if forceA
    for i = 1 : nsessions
        close all        
        
        % file
        filepath = char(fullfile(basepath, dirnames(i)));
        cd(filepath)
        [~, basename] = fileparts(filepath);
        
        % session info
        session = CE_sessionTemplate(pwd, 'viaGUI', false,...
            'force', true, 'saveVar', true);
        nchans = session.extracellular.nChannels;
        fs = session.extracellular.sr;
        spkgrp = session.extracellular.spikeGroups.channels;
        
        % fepsp
        intens = [20 25 30 40 60 80 100];
        fepsp = fEPSPfromDat('basepath', filepath, 'fname', '', 'nchans', nchans,...
            'spkgrp', spkgrp, 'intens', intens, 'concat', false, 'saveVar', true,...
            'force', true, 'extension', 'lfp', 'recSystem', 'oe',...
            'protocol', 'io', 'graphics', false);        
    end
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% rearrange data
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

spkgrp = session.extracellular.electrodeGroups.channels;
ngrp = length(spkgrp);

% intensities throughout sessions
intens = [];
for i = 1 : nsessions
    if isempty(d{i, 2})
        continue
    end
    fepsp = d{i, 2}.fepsp;
    intens = sort(unique([intens, fepsp.intens]));
end

% ampmat: 3d mat of amplitudes; tetrode x intensity x session
% wvmat: 3d mat of average waveforms; tetrode x session x sample
% (for 1 selected intensity)
% ampcell: array of sessions for selected intensity and group. each cell
% contains amps of all traces
ampmat = nan(ngrp, length(intens), nsessions);
wvmat = nan(ngrp, nsessions, size(fepsp.wvsnip, 3));
ampcell = cell(1, nsessions);
si = 40;        % selected intensity [uA]
grp = 4;        % selected tetrode
for i = 1 : nsessions
    fepsp = d{i, 2}.fepsp;
    samp = fepsp.amp;
    swv = fepsp.wvsnip;
    sintens = sort(fepsp.intens);
    [~, ia] = intersect(intens, sintens);
    [~, ib] = intersect(sintens, si);
    ampcell{i} = fepsp.ampcell{grp, ib};
    for ii = 1 : ngrp
        ampmat(ii, ia, i) = samp(ii, :);
        wvmat(ii, i, :) = swv(ii, ib, :);
    end
end

% samp: 2d mat for selected tetrode and intensity; rep x session
sg = 1;         % selected group
si = 250;       % selected intensity
clear samp
for i = 1 : nsessions
    if isempty(f{i})
        continue
    end
    sintens = f{i}.intens;
    [~, ib] = intersect(sintens, si);
    samp(i) = f{i}.ampcell(sg, ib);
end
samp = cell2nanmat(samp);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% graphics
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
close all
set(groot,'defaultAxesTickLabelInterpreter','none');  
set(groot,'defaulttextinterpreter','latex');
set(groot,'defaultLegendInterpreter','latex');

% one figure per intensity across sessions
p = 1;
if p
    for i = 1 : length(intens)
        figure
        plot(squeeze(ampmat(:, i, :))', 'LineWidth', 2)
        xlabel('Session')
        ylabel('Amplitude [mV]')
        title(sprintf('Stim Intensity %d uA', intens(i)))
        legend(strsplit(num2str(1 : ngrp)))
        xticks(1 : nsessions)
        box off
    end
end

% waveform and box plot of amplitudes across sessions for selected
% intensity and tetrode
p = 1;
if p
    figure
    subplot(1, 2, 1)
    tstamps = [1 : size(swv, 3)] / fs * 1000;
    plot([1 : size(swv
    
    
    subplot(1, 2, 2)
    ampmat = cell2nanmat(ampcell);
    boxplot(ampmat, 'PlotStyle', 'traditional')
    xticks(1 : nsessions)
    xlabel('Session')
    ylabel('Amplidute [mV]')
    box off
end

% io across sessions, one figure per tetrode
p = 1;
if p
    for i = 1 : ngrp
        figure
        for ii = 1 : nsessions
            fepsp = d{ii, 2}.fepsp;
            plot(sort(fepsp.intens), fepsp.amp(i, :))
            hold on
        end
        axis tight
        xlabel('Intensity [uA]')
        ylabel('Amplitude [mV]')
        title(sprintf('T%d', i))
        legend(dirnames)
        box off
    end
end

% one figure per tetrode
p = 1;
if p
    for i = 1 : ngrp
        figure
        plot(squeeze(ampmat(i, :, :))', 'LineWidth', 2)
        axis tight
        y = ylim;
        ylim([0 y(2)])
        xticks(1 : nsessions)
        xlabel('Session')
        ylabel('Amplitude [mV]')
        title(sprintf('T%d', i))
        legend(split(num2str(intens)))
        box off
    end
end

% waveform across sessions
p = 1;
ss = [4, 8, 16, 24];    % selected sessions
sg = [1, 7];
if p
    for i = sg
        figure
        plot(tstamps, squeeze(wvmat(i, ss, :))')
        axis tight
        xlabel('Time [ms]')
        ylabel('Amplitude [mV]')
        title(sprintf('T%d', i))
        box off
        legend(split(dirnames(ss)), 'Interpreter', 'none');
    end
end

% waveform across time within session
p = 0;
sg = 7;         % selected group
si = 250;       % selected intensity
ss = 1;         % selected session
if p
    for i = sg
        figure
        suptitle(sprintf('T%d @ %s', i, dirnames(ss)))
        sintens = f{ss}.intens;
        [~, ib] = intersect(sintens, si);
        swv = squeeze(mean(f{ss}.wv{i, ib}, 1));
        samp = f{ss}.ampcell{i, ib};
        
        subplot(1 ,2 ,1)
        plot(tstamps, swv)
        axis tight
        xlabel('Time [ms]')
        ylabel('Amplitude [mV]')
        legend
        box off
        
        subplot(1, 2, 2)
        plot(1 : length(samp), samp)
        xlabel('Stim #')
        ylabel('Amplitude [mV]')
        y = ylim;
        ylim([0 y(2)])
        box off
    end
end

% comparison night and day
% amp during night (even) devided by values in day (odd).
% tetrodes x intensities x days. 
p = 1;
sg = [1, 4 : 8];    % excluded tetrodes not in ca1. 
si = [200, 250, 300];    % reliable intensities
[~, ib] = intersect(intens, si);

% night = ampmat(sg, ib, 2 : 2 : end);
% night = mean(night(:, :, [1 : 3]), 3);
% day = ampmat(sg, ib, 1 : 2 : end);
% day = mean(day(:, :, [1 : 3]), 3);
% night ./ day
% night = ampmat(sg, ib, 2 : 2 : end);
% night = mean(night(:, :, [5 : 10]), 3);
% day = ampmat(sg, ib, 1 : 2 : end);
% day = mean(day(:, :, [5 : 10]), 3);
% night ./ day
% night = ampmat(sg, ib, 2 : 2 : end);
% night = mean(night(:, :, [12 : 13]), 3);
% day = ampmat(sg, ib, 1 : 2 : end);
% day = mean(day(:, :, [12 : 13]), 3);
% night ./ day

ndmat = ampmat(sg, ib, 2 : 2 : end) ./  ampmat(sg, ib, 1 : 2 : end);
if p
    figure
    [~, ib] = intersect(intens, si);
    plot(squeeze(mean(ndmat(:, :, :), 2))', 'LineWidth', 2)
    hold on
    plot([1 size(ndmat, 3)], [1 1], '--k')
    axis tight
    y = ylim;
    ylim([0 y(2)])
    xlabel('Time [days]')
    ylabel('Ratio night / day')
    legend(split(num2str(sg)))
    title(sprintf('night / day @%d uA', intens(ib)))
end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% to prism
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
squeeze(ampmat(7, :, :));
squeeze(wvmat(7, :, :));

squeeze(mean(mean(ndmat(:, :, 1 : 3), 2), 1))
squeeze(mean(mean(ndmat(:, :, 5 : 10), 2), 1))
squeeze(mean(mean(ndmat(:, :, 12 : 13), 2), 1))

plot(squeeze(mean(ampmat([1, 4 : 8], [2 : 6], :), 1))')