
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% params
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

basepath = 'E:\Leore';
filename = 'b3.xlsx';
filename = fullfile(basepath, filename);
mnames = [60 61 62 63 66 67];

forceL = false;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% load and arrange data
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

nmice = length(mnames);
if forceL || ~exist('micenames', 'var')
    for i = 1 : nmice
        
        micenames{i} = ['m', num2str(mnames(i))];
        [num, ~, raw] = xlsread(filename, micenames{i});
        m{i}.name = micenames{i};
        m{i}.date = num(1, 2 : 2 : end);
        m{i}.time = num(2, 2 : 2 : end);
        m{i}.weight = num(3, 2 : 2 : end);
        m{i}.delay = num(4, 2 : 2 : end);
        m{i}.dur = num(5 : end, 2 : 2 : end);
        
        % arrange direction
        [maxtrials, nsessions] = size(m{i}.dur);
        m{i}.dir = char(zeros(size(m{i}.dur)));
        k = 3;
        for j = 1 : nsessions
            m{i}.dir(:, j) = char(raw{6 : 5 + maxtrials, k});
            k = k + 2;
        end
        
        % arrange correct trials
        for j = 1 : nsessions
            x = strtrim(m{i}.dir(:, j))';
            for k = 1 : maxtrials - 1
                if x(k) == 'R' && x(k + 1) == 'L' || ...
                        x(k) == 'L' && x(k + 1) == 'R'
                    m{i}.correct(k, j) = 1;
                elseif x(k) == 'R' && x(k + 1) == 'R' || ...
                        x(k) == 'L' && x(k + 1) == 'L'
                    m{i}.correct(k, j) = 0;
                else
                    m{i}.correct(k, j) = nan;
                end
            end
        end
    end
    
    % read weight
    [num, ~, raw] = xlsread(filename, 'Weight');
    BLweight = num(1, 2 : end);
    
    % read water intake
    [num, ~, raw] = xlsread(filename, 'WaterIntake');
    water = num(:, 2 : nmice + 1);
    waterDate = num(:, 1);
end

% find max number of sessions
maxsessions = 1;
for i = 1 : nmice
    maxsessions = max([maxsessions, length(m{i}.date)]);
end

% arrange mats (session x mouse)
correct = nan(maxsessions, nmice);
dur = nan(maxsessions, nmice);
weight = nan(maxsessions, nmice);
for i = 1 : nmice
    nsessions = length(m{i}.date);
    correct(1 : nsessions, i) = nanmean(m{i}.correct, 1);
    dur(1 : nsessions, i) = nanmean(m{i}.dur, 1);
    weight(1 : nsessions, i) = m{i}.weight / BLweight(i) * 100;
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% graphics - params vs. session
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
mice = [1, 3, 4, 5];
delay = 10;
dates = [2.1, 3.1, 4.1, 5.1, 6.1, 7.1, 8.1, 9.1, 10.1, 11.1];
dates = [2.9, 3.9, 4.9, 5.9, 6.9, 7.9, 8.9, 9.9, 10.9, 11.9];
shadeIdx = [5 10];
shadeIdx = [8.5 9.5];
mClr = 'brbbb';
pflag = [1 1 1 0];      % (1) success, (2) duration, (3) weight, (4) water
avgflag = 1;
cump = cumsum(pflag);

% select specific data
clear data
for i = mice
    nsessions = length(m{i}.date);
    delayIdx = m{i}.delay == delay;
    dateIdx = zeros(1, nsessions);
    for ii = 1 : length(dates)
        dateIdx = dateIdx | m{i}.date == dates(ii);
    end
    idx = delayIdx & dateIdx;
end
waterIdx = zeros(length(waterDate), 1);
for i = 1 : length(dates)
    waterIdx = waterIdx | dates(i) == waterDate;
end

close all
figure
% -------------------------------------------------------------------------
% success
if pflag(1)
    data = correct(idx, mice);
    yLimit = [0.5 1];
    subplot(sum(pflag), 1, cump(1))
    hax(cump(1)) = gca;
    paramsVsSession(data, yLimit, mClr, shadeIdx, avgFlag, dates, mice)    
    ylabel('Success Rate [%]')
    yticks([0 0.5 0.75 1])
end

% -------------------------------------------------------------------------
% running duration
if pflag(2)
    data = dur(idx, mice);
    subplot(sum(pflag), 1, cump(2))
    hax(cump(2)) = gca;
    paramsVsSession(data, yLimit, mClr, shadeIdx, avgFlag, dates, mice)

  
    yLimit = ylim;
    yLimit = [0 yLimit(2)];
    ylim(yLimit);
    if ~isempty(shadeIdx)
        fill([shadeIdx fliplr(shadeIdx)]', sort([yLimit yLimit]), 'y',...
            'FaceAlpha', 0.2, 'EdgeAlpha', 0)
    end
    if avgflag
        stdshade(data', 0.1, 'k');
    end
    ylabel('Trial Duration [s]')
    x = xlim;
    xlim([1 x(2)])
    xticks([1 : length(dates)])
    xticklabels(split(num2str(dates)))
    box off
    set(gca, 'TickLength', [0 0])
end

% -------------------------------------------------------------------------
% weight
if pflag(3)
    data = weight(idx, mice);
    subplot(sum(pflag), 1, cump(3))
    hax(cump(3)) = gca;
    hp = plot(data);
    if length(mice) == length(mClr)
        for i = 1 : length(mice)
            hp(i).Color = mClr(i);
            hp(i).Color(4) = 1;
        end
    end
    hold on
    yLimit = [80 100];
    ylim(yLimit);
    if ~isempty(shadeIdx)
        fill([shadeIdx fliplr(shadeIdx)]', sort([yLimit yLimit]), 'y',...
            'FaceAlpha', 0.2, 'EdgeAlpha', 0)
    end
    if avgflag
        stdshade(data', 0.1, 'k');
    end
    ylabel('Norm. Weight [%]')
    x = xlim;
    xlim([1 x(2)])
    xticks([1 : length(dates)])
    xticklabels(split(num2str(dates)))
    box off
    set(gca, 'TickLength', [0 0])
end

% -------------------------------------------------------------------------
% water
if pflag(4)
    data = water(waterIdx, mice);
    subplot(sum(pflag), 1, cump(4))
    hax(cump(4)) = gca;
    hp = plot(data);
    if length(mice) == length(mClr)
        for i = 1 : length(mice)
            hp(i).Color = mClr(i);
            hp(i).Color(4) = 1;
        end
    end
    hold on
    yLimit = ylim;
    yLimit = [0 yLimit(2)];
    ylim(yLimit);
    if ~isempty(shadeIdx)
        fill([shadeIdx fliplr(shadeIdx)]', sort([yLimit yLimit]), 'y',...
            'FaceAlpha', 0.2, 'EdgeAlpha', 0)
    end
    if avgflag
        stdshade(data', 0.1, 'k');
    end
    ylabel('Water Intake [ml]')
    x = xlim;
    xlim([1 x(2)])
    xticks([1 : length(dates)])
    xticklabels(split(num2str(dates)))
    box off
    set(gca, 'TickLength', [0 0])
end

xlabel(hax(end), 'Time [d]')
legend(hax(end), 'best', micenames(mice))

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% success vs. delay
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% select specific data
pflag = 0;
if pflag
    clear data
    mice = [1, 3, 4, 6];
    rmDates = [3.9, 4.9, 5.9, 6.9];      % dates to exclude from calculation
    
    delays = unique(m{i}.delay);
    k = 1;
    for i = mice
        nsessions = length(m{i}.date);
        delayIdx = zeros(1, nsessions);
        dateIdx = zeros(1, nsessions);
        for ii = 1 : rmDates
            dateIdx = dateIdx | m{i}.date == rmDates(ii);
        end
        for ii = 1 : length(delays)
            delayIdx = m{i}.delay == delays(ii);
            idx = delayIdx & ~dateIdx;
            data(k, ii) = mean(correct(idx, i));
        end
        k = k + 1;
    end
    
    figure
    bar(mean(data, 1))
    hold on
    errorbar(mean(data, 1), std(data, [], 1), 'k', 'LineWidth', 2)
    xticklabels(split(num2str(delays)))
    xlabel('Delay [s]')
    ylabel('Success Rate [%]')
    set(gca, 'TickLength', [0 0])
    title('Mnemonic Difficulty')
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% avg success per mouse
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
mice = [1 : 6];
delay = 10;
dates = [];
clear data
k = 1;
for i = mice
    nsessions = length(m{i}.date);
    delayIdx = m{i}.delay == delay;
    if ~isempty(dates)
    dateIdx = zeros(1, nsessions);
    for ii = 1 : length(dates)
        dateIdx = dateIdx | m{i}.date == dates(ii);
    end
    else
        dateIdx = ones(1, nsessions);
    end
    idx = delayIdx & dateIdx;
    data(k) = mean(correct(idx, i));
    k = k + 1;
end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% legacy
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%
% %%% correlation running duration and weight %%%
% figure
% for i = mice
% subplot(3, 2, i)
% scatter(weight(:, i), dur(:, i), 'filled', mClr(i))
% box off
% set(gca, 'TickLength', [0 0])
% ylim([0 120])
% xlim([0.75 1])
% [rho, pval] = corr([weight(:, i), dur(:, i)], 'Rows', 'complete');
% txt = sprintf('m%d; r = %.2g; p = %.2g', i, rho(2, 1), pval(2, 1));
% title(txt)
% end
% subplot(3, 2, 6)
% for i = mice
%     scatter(weight(:, i), dur(:, i), 'filled', mClr(i))
%     hold on
% end
% box off
% set(gca, 'TickLength', [0 0])
% % ylim([0 120])
% % xlim([0.75 1])
% xlabel('Norm. Weight')
% ylabel('Running Duration [s]')
% [rho, pval] = corr([weight(:), dur(:)], 'Rows', 'complete');
% txt = sprintf('all; r = %.2g; p = %.2g', rho(2, 1), pval(2, 1));
% title(txt)
%
% %%% correlation correct and weight %%%
% figure
% for i = mice
% subplot(3, 2, i)
% scatter(weight(:, i), correct(:, i), 'filled', mClr(i))
% box off
% set(gca, 'TickLength', [0 0])
% % ylim([0 120])
% % xlim([0.75 1])
% [rho, pval] = corr([weight(:, i), correct(:, i)], 'Rows', 'complete');
% txt = sprintf('m%d; r = %.2g; p = %.2g', i, rho(2, 1), pval(2, 1));
% title(txt)
% end
% subplot(3, 2, 6)
% for i = mice
%     scatter(weight(:, i), correct(:, i), 'filled', mClr(i))
%     hold on
% end
% box off
% set(gca, 'TickLength', [0 0])
% % ylim([0 120])
% % xlim([0.75 1])
% xlabel('Norm. Weight')
% ylabel('Correct [%]')
% [rho, pval] = corr([weight(:), correct(:)], 'Rows', 'complete');
% txt = sprintf('all; r = %.2g; p = %.2g', rho(2, 1), pval(2, 1));
% title(txt)
%
%
%
%
%
%
% %%% weight across sessions %%%
% clear weight
% clear weightRaw
% for i = mice
%     weightRaw(:, i) = m{i}.weight;
%     weight(:, i) = m{i}.weight / BLweight(i);
% end
% weightRaw = [BLweight; weightRaw];
% weight = [1 1 1 1 1; weight];
%
% sticks = [1, 2, 4, 6, 7, 9 : 2 : 24];
% sidx = sticks(11);
%
% f = figure;
%
% subplot(2, 1, 1)
% plot(weightRaw(delayIdx, :))
% hold on
% errorbar(nanmean(weightRaw(delayIdx, :), 2), std(weightRaw(delayIdx, :), [], 2, 'omitnan'), 'k', 'LineWidth', 2)
% % ylim([0.75 1])
% xlim([1 size(weightRaw(delayIdx, :), 1)])
% ylim([20 32])
% y = ylim;
% x = xlim;
% plot([sidx + 0.5, sidx + 0.5], y, '--k', 'LineWidth', 2)
% yticks([20, 32])
% xticks([])
% box off
% set(gca, 'TickLength', [0 0])
% ylabel('Weight [g]')
%
% subplot(2, 1, 2)
% plot(weight(delayIdx, :))
% hold on
% errorbar(nanmean(weight(delayIdx, :), 2), std(weight(delayIdx, :), [], 2, 'omitnan'), 'k', 'LineWidth', 2)
% box off
% set(gca, 'TickLength', [0 0])
% xlabel('Day [#]')
% % xticks([1 : size(correct, 1)])
% axis tight
% xlim([1 size(dur(delayIdx, :), 1)])
% y = ylim;
% x = xlim;
% plot([sidx + 0.5, sidx + 0.5], y, '--k', 'LineWidth', 2)
% plot(x, [0.8 0.8], '--r')
% plot(x, [0.85 0.85], '--b')
% yticks([0.8 0.85 1])
% xticks(sticks)
% xticklabels(num2str([1 : 13]'))

function paramsVsSession(data, yLimit, mClr, shadeIdx, avgFlag,...
    dates, mice)
    hp = plot(data);
    if length(mice) == length(mClr)
        for i = 1 : length(mice)
            hp(i).Color = mClr(i);
            hp(i).Color(4) = 1;
        end
    end
    hold on
    if ~isempty(shadeIdx)
        fill([shadeIdx fliplr(shadeIdx)]', sort([yLimit yLimit]), 'y',...
            'FaceAlpha', 0.2, 'EdgeAlpha', 0)
    end
    if avgFlag
        stdshade(data', 0.1, 'k');
    end
    % plot(x, [0.5 0.5], '--k', 'LineWidth', 1)
    ylim(yLimit)
    ylabel('Success Rate [%]')
    x = xlim;
    xlim([1 x(2)])
    xticks([1 : length(dates)])
    xticklabels(split(num2str(dates)))
    box off
    set(gca, 'TickLength', [0 0])
end


