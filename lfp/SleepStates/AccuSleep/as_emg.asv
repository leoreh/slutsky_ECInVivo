function ssEmg = as_emg(varargin)

% recieves (or loads) an emg_rms signal (from sSig) and creates a labels_orig
% vector from the bimodal distribution. Then creates stateEpochs and saves
% in a new ss struct. Can manually review the labels_orig in accusleep.
%
% INPUT:
%   basepath        char. fullpath to recording folder {pwd}
%   minDur          numeric. minimum duration of an epoch. 
%                   if length(minDur) == nstates than a different minimum
%                   duration will be applied to each state
%   interDur        numeric. combine epochs separated by <= interDur
%   rmOtl           logical. remove spectrogram outliers. see get_specOutliers.m
%   saveVar         logical. save ss var {true}
%   inspectLabels   logical. manually review classification 
% 
% OUTPUT
%
% DEPENDENCIES
%   as_epochs
% 
% TO DO LIST
%
% 25 dec 24 LH      

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% arguments
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

p = inputParser;
addParameter(p, 'basepath', pwd, @ischar)
addOptional(p, 'minDur', 5, @isnumeric);
addOptional(p, 'interDur', 4, @isnumeric);
addOptional(p, 'rmOtl', false, @islogical);
addOptional(p, 'flgEmg', false, @islogical);
addOptional(p, 'saveVar', false, @islogical);
addOptional(p, 'inspectLabels', false, @islogical);

parse(p, varargin{:})
basepath        = p.Results.basepath;
minDur          = p.Results.minDur;
interDur        = p.Results.interDur;
rmOtl           = p.Results.rmOtl;
flgEmg          = p.Results.flgEmg;
saveVar         = p.Results.saveVar;
inspectLabels   = p.Results.inspectLabels;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% preparations
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% files
basepath = pwd;
[~, basename] = fileparts(pwd);
sigfile = fullfile(basepath, [basename, '.sleep_sig.mat']);
statesfile = [basename '.sleep_statesEmg.mat'];

% state config
cfg = as_loadConfig('flgEmg', true);
snames = cfg.names;
clr = cfg.colors;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% load data and create labels_orig
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% emg data
% emg = load(sigfile, 'emg_rms');
sSig = load(sigfile);
emg = sSig.emg_rms;

% find threshold to separate the bimodal distribution of emg
[~, cents] = kmeans(emg(:), 2);
emgThr = mean(cents);

% create EMG labels_orig
labels_orig = double(emg > emgThr);
labels_orig(emg < emgThr) = 2;


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% create state epochs
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

[stateEpochs, epochStats] = as_epochs('labels_orig', labels_orig,...
    'minDur', minDur, 'interDur', interDur, 'rmOtl', true,...
    'sstates', [1, 2], 'graphics', false);

% reverse engineer labels_orig such that low-emg gets precedence
labels = ones(1, length(labels_orig)) * 3;

for stateIdx = 1 : 2
    % Create an array of indices for each epoch and set the labels_orig
    labelsIdx = cellfun(@(x) arrayfun(@(start, stop) start : stop, x(:,1), x(:,2), 'uni', false), ...
                  stateEpochs(stateIdx), 'uni', false);
    labelsIdx = horzcat(labelsIdx{:});
    labels(horzcat(labelsIdx{:})) = stateIdx;
end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% create and save struct 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

ssEmg.info.names = cfg.names;
ssEmg.info.colors = cfg.colors;
ssEmg.info.epochLen = cfg.epochLen;
ssEmg.info.minBoutLen = cfg.minBoutLen;
ssEmg.info.sSig = sSig.info;
ssEmg.info.emgThr = emgThr;
ssEmg.info.minDur = minDur;
ssEmg.info.interDur = interDur;
ssEmg.info.runtime = datetime("now");
ssEmg.labels = labels;
ssEmg.labels_orig = labels_orig;
ssEmg.stateEpochs = stateEpochs;
ssEmg.epLen = epochStats.epLen;
ssEmg.nepcohs = epochStats.nepochs;
ssEmg.totDur = epochStats.totDur;

if saveVar
    save(statesfile, 'ssEmg')
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% manual inspection 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% sSig = load(sigfile);
labels_origmanfile = [basename, '.sleep_labels_origManEmg.mat'];
AccuSleep_viewer(sSig, labels, labels_origmanfile, true)





end

% EOF