% accusleep_simulation. compares classification relative to gold standard
% using calibration sets generated by different length of data.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% files
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

basepath = 'D:\Data\lh81\lh81_210208_065300';

[~, basename] = fileparts(basepath);


labelsfile = [basename, '.AccuSleep_labels.mat'];
labelsmanfile = [basename, '.AccuSleep_labelsMan.mat'];
eegfile = [basename '.AccuSleep_EEG.mat'];
emgfile = [basename '.AccuSleep_EMG.mat'];
netfile = 'D:\Code\AccuSleep\trainedNetworks\trainedNetwork2,5secEpochs.mat';
netfile = 'D:\Code\slutskycode\extracellular in vivo\lfp\detectStates\AccuSleep\4states_2,5s_6hrLabels_net.mat';
if ~exist(netfile)
    [netfile, netpath] = uigetfile;
    netfile = [fullfile(netpath, netfile), '.mat'];
end

% load
load(netfile, 'net')
load(emgfile, 'EMG')
load(eegfile, 'EEG')
load([basename, '.session.mat'])
load(labelsmanfile, 'labels')
gldstrd = labels;

% params
recDur = session.general.duration;
fsLfp = session.extracellular.srLfp;
mousepath = fileparts(basepath);
SR = 512;
epochLen = 2.5;
minBoutLen = epochLen;
nstates = 4; 
labelnames = {'REM', 'WAKE', 'NREM', 'DROWSY'};
nepochs = length(gldstrd);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% simulate
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% length of gldstrd labels used for creating the calibration data
calLen = [100, 500, 1000, 5000, 10000, nepochs];
calLen = nepochs;

% initialize
labelsOutput = zeros(length(calLen), nepochs);
labelsCal = ones(length(calLen), nepochs) * 4;
calibrationData = zeros(length(calLen), 177, 2);

for j = 1 : length(calLen)
  
    % create calibration with a random subset of gldstrd values
    labelidx = randperm(nepochs, calLen(j));    
    labelsCal(j, labelidx) = gldstrd(labelidx);
    calibrationData(j, :, :) = createCalibrationData(standardizeSR(EEG, SR, 128),...
        standardizeSR(EMG, SR, 128), labelsCal(j, :), 128, epochLen);
    
    % classify    
    labelsOutput(j, :) = AccuSleep_classify(EEG, EMG, net, SR, epochLen,...
        squeeze(calibrationData(j, :, :)), minBoutLen);   
end

% visualize data
AccuSleep_viewer(EEG, EMG, SR, epochLen, labelsOutput(j, :), [])

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% inspect results
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% initialize
statesOutput = zeros(length(calLen), nstates, nstates);
edges = [1 : nstates + 1];
stateEpochs = histcounts(gldstrd);
for j = 1 : length(calLen)
    for jj = 1 : nstates        
        statesOutput(j, jj, :) = histcounts(labelsOutput(j, gldstrd == jj),...
            edges) / stateEpochs(jj) * 100;
    end
end

fh = figure;
for jj = 1 : nstates
    subplot(1, nstates, jj)
    bar(squeeze(statesOutput(:, jj, :)), 'stacked')
    title(labelnames{jj})
    xticklabels(split(num2str(calLen)))
    xtickangle(45)
    xlabel('Calibration Data Length')
    ylabel('Classified state [%]')
end
legend(labelnames)

figname = 'AccuSimResults_classifiedStates';
figname = fullfile(mousepath, figname);
export_fig(figname, '-tif', '-transparent', '-r300')

AccuSimResults.calLen = calLen;
AccuSimResults.labelsCal = labelsCal;
AccuSimResults.labelsOutput = labelsOutput;
AccuSimResults.statesOutput = labelsOutput;
AccuSimResults.caldata = calibrationData;
AccuSimResults.labelnames = labelnames;
save(fullfile(mousepath, 'AccuSimResults.mat'), 'AccuSimResults')




