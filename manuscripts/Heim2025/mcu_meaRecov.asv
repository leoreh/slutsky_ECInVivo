%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% ANALYZE
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Files
basepaths = [mcu_sessions('mea_bac')];
basepaths = [mcu_sessions('mea_mcuko')];

nFiles = length(basepaths);
vars = {'mea', 'st_metrics', 'fr'};
v = basepaths2vars('basepaths', basepaths, 'vars', vars);

% Analysis Params
winLim = [5 * 60 60 * 60];        
expLim = [0, 8 * 60 * 60];
% expLim = [0, Inf];

for iFile = 1 : nFiles

    basepath = basepaths{iFile};
    cd(basepath);
    
    % files = dir('*sorted*');
    % mea = mea_orgNex('fname', files.name, 'basepath', pwd, 'forceL', false);
    spktimes = v(iFile).mea.spktimes;
    
    % % --- Firing Rate Recovery
    % frr = mea_frRecovery(spktimes, 'winLim', expLim,...
    %     'flgSave', true, 'flgPlot', true);

    % --- Spike timing metrics
    st = spktimes_metrics('spktimes', spktimes, 'sunits', [],...
        'bins', {[0, 70 * 60], [6 * 60 * 60, 8 * 60 * 60]}, 'flg_force', true, 'flg_save', true, 'flg_all', false);

    % --- Bursts
    brst = spktimes_meaBrst(spktimes, 'binsize', [], 'isiThr', 0.005,...
        'minSpks', 2, 'flg_save', true, 'flg_force', true, 'bins', {[0, 70 * 60], [6 * 60 * 60, 8 * 60 * 60]});

    % --- Population Coupling
    % [prc] = prCoupling(v(iFile).mea.spktimes, params,...
    %     'winLim', winLim, ,'skpLim', 2000, 'flgSave', true);
    % prCoupling_plot(prc, 'basepath', basepath, 'flgSaveFig', true);

end





%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% TABLE PREPARATION - Control vs MCU-KO
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% -------------------------------------------------------------------------
% Load data from both groups
vars = {'frr', 'st_metrics', 'st_brst'};
clear varMap
varMap.uGood      = 'frr.info.uGood';
varMap.FrBsl      = 'frr.frBsl';
varMap.FrRec      = 'frr.frRecov';
varMap.BurstMiz   = 'st.mizuseki'; 
varMap.BurstRoy   = 'st.royer';
varMap.BurstPct   = 'brst.spkprct';
varMap.PertDepth  = 'frr.pertDepth';
varMap.uRecov     = 'frr.uRecov';
varMap.RecTime    = 'frr.recovTime';
varMap.RecErr     = 'frr.recovError';
varMap.RecSlope   = 'frr.normSlope';
colIdx = 1;

grps = {'mea_bac'; 'mea_mcuko'};
grpLbls = {'Control'; 'MCU-KO'};
clear v2tbl

for iGrp = 1 : length(grps)
    basepaths = mcu_sessions(grps{iGrp});
    nFiles = length(basepaths);
    
    % Load firing rate recovery, spike timing, and burst data
    v = basepaths2vars('basepaths', basepaths, 'vars', vars);
    
    tblCell{iGrp} = v2tbl('v', v, 'varMap', varMap, 'groupName',...
        grpLbls{iGrp}, 'mouseNames', get_mname(basepaths),...
        'colIdx', 1);
   
end
tbl = vertcat(tblCell{:});
tbl = tbl(tbl.uGood, :);
tbl(:, 'uGood') = [];
dataTbl = rmmissing(tbl);


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% MULTIPLE LINEAR REGRESSION 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Files
basepaths = [mcu_sessions('mea_bac')];
basepaths = [mcu_sessions('mea_mcuko')];
nFiles = length(basepaths);
vars = {'st_metrics', 'st_brst', 'frr'};
v = basepaths2vars('basepaths', basepaths, 'vars', vars);

% Concate structs, organize vars and table
st = catfields([v(:).st], 2);
brst = catfields([v(:).brst], 2);
% prc = catfields([v(:).prc], 1);
frr = catfields([v(:).frr], 1);

% Select units
uGood = frr.info.uGood;
nUnits = sum(uGood);

% Grab only units that reached the recovery threshold
% recovUnits = frr.recovTime < 25000;
% uGood = uGood & recovUnits;
% nUnits = sum(uGood);

% -------------------------------------------------------------------------
% PREPARE TABLE
idxBrstTime = 1;

dataTbl = table();
dataTbl.UnitID = (1:nUnits)';
% dataTbl.PRC = prc.prc0_norm(uGood);
dataTbl.uRecov = frr.uRecov(uGood);
dataTbl.BurstRoy = st.royer(idxBrstTime, uGood)';
dataTbl.BurstMiz = st.mizuseki(idxBrstTime, uGood)';
dataTbl.BurstPct = brst.spkprct(idxBrstTime, uGood)';
dataTbl.FrBsl = frr.frBsl(uGood);
dataTbl.LooBsl = frr.looBsl(uGood);
dataTbl.FrRec = frr.frRecov(uGood);
dataTbl.RecSlope = frr.normSlope(uGood);
dataTbl.RecTime = frr.recovTime(uGood);
dataTbl.RecErr = frr.recovError(uGood);
dataTbl.RecChg = frr.recovChange(uGood);
dataTbl.hCap = frr.hCapacity(uGood);
dataTbl.NIF = frr.nif(uGood);
pertDepth = (frr.frBsl - frr.frTrough) ./ frr.frBsl;
dataTbl.PertDepth = pertDepth(uGood);
dataTbl.PertDepth = frr.pertDepth(uGood);

% Remove rows with NaN values. fitlm would do this anyway, but this
% makes the table cleaner for inspection and ensures transformations are
% applied to the final data.
dataTbl = rmmissing(dataTbl, 'MinNumMissing', 9);
tbl = rmmissing(tbl);
infIdx = isinf(dataTbl.BurstRoy);
dataTbl.BurstRoy(infIdx) = max(dataTbl.BurstRoy(~infIdx));
infIdx = isinf(-dataTbl.BurstRoy);
dataTbl.BurstRoy(infIdx) = min(dataTbl.BurstRoy(~infIdx));

% -------------------------------------------------------------------------
% TRANSFORM VARIABLES
% Log transform skewed variables and Z-score all variables
% We apply log1p (log(1+x)) to handle variables with 0s. A skewness
% threshold of 2 is used as a rule-of-thumb for highly skewed data.
% Z-scoring is useful in multiple regression to compare the effect of
% predictors that are on different scales

% First, apply log1p transformation to original dataTbl
tblVars = dataTbl.Properties.VariableNames;
skewThr = 2;
tmpTbl = dataTbl;
for iVar = 1:length(tblVars)
    varName = tblVars{iVar};
    if strcmp(varName, 'UnitID')
        continue;
    end
    
    variableData = tmpTbl.(varName);
    
    % Check for non-negativity before log transform
    if min(variableData) >= 0
        s = skewness(variableData);
        if s > skewThr
            % dataTbl.(varName) = log1p(variableData);
            tmpTbl.(varName) = log10(variableData + min(variableData(variableData > 0) / 2));
        end
    end
end

% Apply z-scoring
varsExc = {'UnitID', 'RecSlope', 'RecErr', 'hCap',...
    'RecTime', 'uRecov'};
lmTbl = tmpTbl;
for iVar = 1:length(tblVars)
    varName = tblVars{iVar};
    if any(contains(varName, varsExc))
        continue
    end
    
    % Z-score
    lmTbl.(varName) = zscore(lmTbl.(varName));
end


% -------------------------------------------------------------------------
% MLR
varsPredict = {'PRC', 'FrBsl', 'FrRec', 'BurstMiz', 'PertDepth', 'BurstPct'}; 

% Logistic Regression Model
grpIdx = dataTbl.Group == 'MCU-KO';
tblIdx = grpIdx;
frml = 'uRecov ~ FrBsl + BurstMiz + PertDepth + (1|Mouse)';
frml = 'uRecov ~ FrBsl + BurstMiz + PertDepth + (1|Mouse)';


frml = 'uRecov ~ BurstMiz * Group + (1|Mouse)';
fitglme(dataTbl, frml, 'Distribution', 'binomial', 'FitMethod', 'REMPL')

% Study Recovery Error on all units
varsResponse = 'RecErr';  
varsPredict = {'FrBsl', 'BurstMiz', 'PertDepth'}; 
frml = sprintf('%s ~ %s', varsResponse, strjoin(varsPredict, ' + '));

mdl = fitlm(dataTbl(dataTbl.Group == 'Control', :), frml);
disp(mdl);


% -------------------------------------------------------------------------
% Study Recovery kinetics on units that returned
varsResponse = 'RecTime';  
frml = sprintf('%s ~ %s', varsResponse, strjoin(varsPredict, ' + '));

grpIdx = dataTbl.Group == 'Control';
uIdx = dataTbl.uRecov;
tblIdx = grpIdx & uIdx;

mdl = fitlm(dataTbl(tblIdx, :), frml);
disp(mdl);

varsInc = {'RecErr', 'RecTime', 'PertDepth', 'FrBsl', 'BurstMiz', 'BurstPct'};
hndFig = corrplot(tmpTbl(lmTbl.uRecov, :), 'Type', 'Spearman', 'DataVariables', varsInc);




hndFig = plot_tblPairs(tmpTbl(lmTbl.uRecov, :), 'varsInc', varsInc,...
    'flgOtl', false);



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% LME DURING BASELINE
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% FR per unit, WT vs MCU for RS vs FS 
lmeCfg.frml = 'SpkPct ~ Group + (1|Mouse)';

% run lme
contrasts = 'all';
[lmeStats, lmeCfg] = lme_analyse(lmeData, lmeCfg, 'contrasts', contrasts);

% plot
hFig = lme_plot(lmeData, lmeCfg.lmeMdl, 'ptype', 'bar', 'axShape', 'square'); 
