function lmeData = v2tbl(varargin)
% V2TBL Converts a struct array from basepaths2vars into a table (e.g., for fitlme).
%
% SUMMARY:
% This function creates a "tidy" data table from a struct array where each
% element typically corresponds to a recording session. It is designed to
% prepare data for linear mixed-effects modeling (fitlme).
%
% INPUT (Required):
%   v           - Struct array, output of basepaths2vars. Each element v(i) 
%                 contains data for one session/mouse.
%   varMap      - Struct defining the mapping from desired table column names 
%                 to their location in the struct v.
%   groupName   - String or char array for the 'Group' label.
%   mouseNames  - Cell array of strings with mouse names, corresponding to 
%                 each element of v.
%
% INPUT (Name-Value):
%   None currently implemented.
%
% OUTPUT:
%   lmeData     - Table with all data, organized for LME analysis.
%
% EXAMPLE:
%   varMap.RecTime = 'frr.recovTime';
%   varMap.BurstMiz = 'st.mizuseki';
%   lmeData = v2tbl(v, varMap, 'Control', mouseNames);
%
% DEPENDENCIES:
%   None

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% ARGUMENT PARSING & INITIALIZATION
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

p = inputParser;
addOptional(p, 'v', @isstruct);
addOptional(p, 'varMap', @isstruct);
addOptional(p, 'groupName', @(x) ischar(x) || isstring(x));
addOptional(p, 'mouseNames', @iscell);

parse(p, varargin{:});

v = p.Results.v;
varMap = p.Results.varMap;
groupName = p.Results.groupName;
mouseNames = p.Results.mouseNames;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% INITIALIZE VARIABLES
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Cell array to hold the table from each session
all_tables = {};
mapFields = fieldnames(varMap);

% Global unit counter to ensure unique UnitIDs across all potential groups
persistent uOffset;
if isempty(uOffset)
    uOffset = 0;
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% PROCESS EACH SESSION/MOUSE
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

for iFile = 1:length(v)
    
    % Determine nUnits as most common dimension size across all fields within
    % v(iFile)
    allSizes = [];
    vCell = struct2cell(v(iFile));
    masterSizes = cellfun(@(x) size(struct2cell(x)), vCell, 'UniformOutput', false);
    allSizes = [allSizes, masterSizes{:}];
    nUnits = mode(allSizes);
    
    % Create a table for the current session
    sessionTable = table();

    % Extract all variables based on the map
    for iVar = 1:length(mapFields)
        colName = mapFields{iVar};
        structPath = varMap.(colName);    
        pathParts = strsplit(structPath, '.');
        data = getfield(v(iFile), pathParts{:});
        
        % Ensure data has nUnits as the first dimension (rows)
        if size(data, 1) ~= nUnits
            if size(data, 2) == nUnits
                data = data'; % Transpose to make nUnits the first dimension
            else
                % If neither dimension matches, try to reshape
                data = reshape(data, nUnits, []);
            end
        end
        
        sessionTable.(colName) = data;
    end

    % Add metadata columns
    sessionTable.Group = repmat(string(groupName), nUnits, 1);
    sessionTable.Mouse = repmat(string(mouseNames{iFile}), nUnits, 1);
    
    % Create unique UnitID based on mouse and unit number within mouse
    unitIdx = (1:nUnits)';
    sessionTable.UnitID = uOffset + (iFile * 1000) + unitIdx;

    % Append the table for this session to our list
    all_tables{end+1} = sessionTable;
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% COMBINE ALL TABLES AND UPDATE GLOBAL OFFSET
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Vertically concatenate all session tables into one big table
lmeData = vertcat(all_tables{:});

% Update the global offset for the next time this function is called
[~, maxID] = max(lmeData.UnitID);
uOffset = lmeData.UnitID(maxID);

end

% EOF