function hndSct = plot_scatterCorr(x, y, varargin)
% PLOT_SCATTERCORR Creates a scatter plot with correlation statistics and histograms.
%
% SUMMARY:
% This function creates a scatter plot with marginal histograms and correlation
% statistics. It supports outlier removal, data validation, and automatic log
% scaling based on data skewness.
%
% INPUT (Required):
%   x           - Vector of x-axis data
%   y           - Vector of y-axis data
%
% INPUT (Optional Key-Value Pairs):
%   xLbl        - X-axis label {''}
%   yLbl        - Y-axis label {''}
%   flgOtl       - Logical flag to remove outliers {false}
%   hndFig         - Axes handle to plot into {[]}
%
% OUTPUT:
%   hndFig         - Handle to the axes containing the plot
%
% DEPENDENCIES:
%   None
%
% HISTORY:
%   Aug 2024 (AI Assisted) - Initial version

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% ARGUMENT PARSING & INITIALIZATION
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Define input parameters and their defaults/validation functions
p = inputParser;
addRequired(p, 'x', @isnumeric);
addRequired(p, 'y', @isnumeric);
addParameter(p, 'xLbl', '', @ischar);
addParameter(p, 'yLbl', '', @ischar);
addParameter(p, 'flgOtl', false, @islogical);
addParameter(p, 'hndFig', [], @(x) isempty(x) || ishandle(x));

% Parse input arguments
parse(p, x, y, varargin{:});
x = p.Results.x;
y = p.Results.y;
xLbl = p.Results.xLbl;
yLbl = p.Results.yLbl;
flgOtl = p.Results.flgOtl;
hndFig = p.Results.hndFig;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% DATA VALIDATION
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Get valid indices and log scaling flags
[x, y, flgLog] = validate_data(x, y, flgOtl);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% PLOT CREATION
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Check if we have an existing axes handle
if ~isempty(hndFig) && ishandle(hndFig)
    % Use existing axes - create simple scatter plot
    axes(hndFig);
    hndSct = scatter(x, y, 20, [0.3 0.3 0.3], '.');
    hold on;
    
    % Apply log scaling if needed
    if flgLog(1)
        set(gca, 'XScale', 'log');
    end
    if flgLog(2)
        set(gca, 'YScale', 'log');
    end
    
    % Calculate statistics
    [r, p] = corr(x, y, 'Type', 'Spearman', 'Rows', 'complete');
    
    % Add statistics to title
    stats_str = sprintf('n = %d; r = %.2f; p = %.3f', ...
        sum(~isnan(x) & ~isnan(y)), r, p);
    title(stats_str);
    
    % Add labels
    xlabel(xLbl);
    ylabel(yLbl);
    
else
    % Create new figure with scatter histogram
    if isempty(hndFig)
        hndFig = gcf;
    end
    
    binData = histcounts(x, 'BinMethod', 'fd');
    nBins = length(binData);
    
    % Create scatter histogram
    hndSct = scatterhistogram(hndFig, x, y, ...
        'Color', [0.3 0.3 0.3], ...
        'MarkerStyle', '.', ...
        'MarkerSize', 20,...
        'NumBins', nBins);
    
    % Apply log scaling if needed
    if flgLog(1)
        set(hndSct.Axes(1), 'XScale', 'log');
    end
    if flgLog(2)
        set(hndSct.Axes(1), 'YScale', 'log');
    end
    
    % Calculate statistics
    [r, p] = corr(x, y, 'Type', 'Spearman', 'Rows', 'complete');
    
    % Add statistics to title
    stats_str = sprintf('n = %d; r = %.2f; p = %.3f', ...
        sum(~isnan(x) & ~isnan(y)), r, p);
    title({stats_str});
    
    % Add labels
    xlabel(xLbl);
    ylabel(yLbl);
    
    % Adjust appearance
    hndSct.HistogramDisplayStyle = 'bar';
end

end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% HELPER FUNCTION: VALIDATE DATA
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function [x, y, flgLog] = validate_data(x, y, flgOtl)
% VALIDATE_DATA Validates and optionally removes outliers from input data.
% Also tests skewness to determine if log scaling should be applied.
%
% INPUT:
%   x           - Vector of x-axis data
%   y           - Vector of y-axis data
%   flgOtl      - Logical flag to remove outliers
%
% OUTPUT:
%   x           - Cleaned x data
%   y           - Cleaned y data
%   flgLog      - 2-element logical vector [x_log, y_log] indicating if log scale should be used

% Ensure column vectors
x = x(:);
y = y(:);

% Check for NaN and Inf
validIdx = ~isnan(x) & ~isnan(y) & ~isinf(x) & ~isinf(y);

% Remove outliers if requested
if flgOtl
    [~, xOtl] = rmoutliers(x(validIdx), 'percentiles', [1 99]);
    [~, yOtl] = rmoutliers(y(validIdx), 'percentiles', [1 99]);
    
    % Update valid indices
    validIdx(validIdx) = ~xOtl & ~yOtl;
end

% Apply valid indices
x = x(validIdx);
y = y(validIdx);

% Test skewness and determine log scaling. Apply log scale if skewness > 1
% (positive skew) or < -1 (negative skew) and all values are positive
flgLog = [false, false];
skewThr = 2;

if min(x) >= 0
    if sum(x == 0) < 
end


skew_x = skewness(x);
flgLog(1) = abs(skew_x) > skewThr && all(x > 0);
skew_y = skewness(y);
flgLog(2) = abs(skew_y) > skewThr && all(y > 0);

end 